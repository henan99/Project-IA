#%%

import numpy as np
import matplotlib.pyplot as plt

import preprocessing as prep

from sklearn.metrics import  confusion_matrix, ConfusionMatrixDisplay
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import recall_score
from sklearn.metrics import precision_score

X_train, X_test, y_train, y_test = prep.X_train, prep.X_test, prep.y_train, prep.y_test

#%%

def evaluate(RFC_var):
    RFC_var.fit(X_train,y_train)
    rfc_predict = RFC_var.predict(X_test)

    cm = confusion_matrix(y_test, rfc_predict)
    #print(cm)

    score = RFC_var.score(X_test, y_test)
    prec = precision_score(y_test, rfc_predict)

    return score, recall_score(y_test, rfc_predict), prec

    #print('score_train:', RFC_var.score(X_train, y_train))
    # Sur apprentissage!

    #ConfusionMatrixDisplay(confusion_matrix = cm, display_labels= RFC_var.classes_).plot()
    #plt.show()

#%%

#single tree (for fun lol)
RFC = RandomForestClassifier(n_jobs=2,n_estimators=1)
scores = np.zeros(10)
recall = np.zeros(10)
precs = np.zeros(10)

for j in range(10):
        RFC = RandomForestClassifier(n_jobs=2, n_estimators=1,max_depth=7,class_weight='balanced')
        scores[j], recall[j], precs[j] = evaluate(RFC)      

#%%

#print(scores)
#print(recall)
#print(precs)
print(np.average(scores))
print(np.average(recall))
print(np.average(precs))

#%%

plt.figure()

samplesplits = np.arange(2,28,2)
testvals = np.zeros(10*len(samplesplits))
recallvals = np.zeros(10*len(samplesplits))
precvals = np.zeros(10*len(samplesplits))

for i in range(len(samplesplits)) :
#for split in samplesplits:
    for j in range(10):
        RFC_2 = RandomForestClassifier(n_jobs=2, n_estimators=100,min_samples_split=samplesplits[i],class_weight='balanced')
        testvals[i*10+j], recallvals[i*10+j], precvals[i*10+j] = evaluate(RFC_2)
        #plt.plot(samplesplits[i],recall,lw = 0,marker ='.',ms = 0.9)

#%%

plt.plot(
    np.repeat(samplesplits,10),
    testvals,
    lw=0,marker=".",ms = 1.5,color='k',
    label = "individual accuracies")
plt.plot(
    samplesplits,
    np.average(np.reshape(testvals,(len(samplesplits),10)), axis=1),
    color = 'blue',
    label="average"
)
plt.ylabel("accuracy")
plt.ylim(0.97,0.98)
plt.xlabel("minimum samples split")
plt.legend()
plt.savefig("Graphics/forest_samplesplits.pdf")
plt.show()

#%%

plt.plot(
    np.repeat(samplesplits,10),
    recallvals,
    lw=0,marker=".",ms = 1.5,color='k',
    label = "individual recalls")
plt.plot(
    samplesplits,
    np.average(np.reshape(recallvals,(len(samplesplits),10)), axis=1),
    color = 'blue',
    label="average recall"
)

plt.plot(
    np.repeat(samplesplits,10),
    precvals,
    lw=0,marker=".",ms = 1.5,color='k',
    label = "individual precisions")
plt.plot(
    samplesplits,
    np.average(np.reshape(precvals,(len(samplesplits),10)), axis=1),
    color = 'green',
    label="average precision"
)

plt.ylabel("recall and precision")
#plt.ylim(0.97,0.98)
plt.xlabel("minimum samples split")
plt.legend()
plt.savefig("Graphics/forest_samplesplits_recall.pdf")
plt.show()

#%%

plt.figure()

depths = np.arange(2,20,1)
testvals3 = np.zeros(10*len(depths))
recallvals3 = np.zeros(10*len(depths))
precvals3 = np.zeros(10*len(depths))

for i in range(len(depths)) :
#for split in samplesplits:
    for j in range(10):
        RFC_3 = RandomForestClassifier(n_jobs=2, n_estimators=100,max_depth = depths[i],class_weight='balanced')
        testvals3[i*10+j], recallvals3[i*10+j], precvals3[i*10+j] = evaluate(RFC_3)

#%%

plt.plot(
    np.repeat(depths,10),
    testvals3,
    lw=0,marker=".",ms = 1.5,color='k',
    label = "individual accuracies")
plt.plot(
    depths,
    np.average(np.reshape(testvals3,(len(depths),10)), axis=1),
    color = 'blue',
    label="average"
)
plt.ylabel("accuracy")
plt.ylim(0.965,0.98)
plt.xlabel("depth")
plt.legend()
plt.savefig("Graphics/forest_depths.pdf")
plt.show()

#%%

plt.plot(
    np.repeat(depths,10),
    recallvals3,
    lw=0,marker=".",ms = 1.5,color='k',
    label = "individual recalls")
plt.plot(
    depths,
    np.average(np.reshape(recallvals3,(len(depths),10)), axis=1),
    color = 'blue',
    label="average recall"
)

plt.plot(
    np.repeat(depths,10),
    precvals3,
    lw=0,marker=".",ms = 1.5,color='k',
    label = "individual precisions")
plt.plot(
    depths,
    np.average(np.reshape(precvals3,(len(depths),10)), axis=1),
    color = 'green',
    label="average precision"
)

plt.ylabel("recall")
#plt.ylim(0.97,0.98)
plt.xlabel("depth")
plt.legend()
plt.savefig("Graphics/forest_depths_recall.pdf")
plt.show()
# %%
